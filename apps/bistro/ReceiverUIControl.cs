//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/ReceiverUIControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ReceiverUIControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ReceiverUIControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ReceiverUIControl"",
    ""maps"": [
        {
            ""name"": ""UIControl"",
            ""id"": ""242a3f7f-7689-457e-96b9-fc64de8ed0f4"",
            ""actions"": [
                {
                    ""name"": ""ToggleUI"",
                    ""type"": ""Button"",
                    ""id"": ""6327df43-3fd0-445e-a784-fc2aa489d68e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e0e77d0-88cd-4d0d-b5b6-2fd548d1888d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba7906e7-4e10-4d02-bd5c-f87c733cfbdf"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UIControl
        m_UIControl = asset.FindActionMap("UIControl", throwIfNotFound: true);
        m_UIControl_ToggleUI = m_UIControl.FindAction("ToggleUI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UIControl
    private readonly InputActionMap m_UIControl;
    private List<IUIControlActions> m_UIControlActionsCallbackInterfaces = new List<IUIControlActions>();
    private readonly InputAction m_UIControl_ToggleUI;
    public struct UIControlActions
    {
        private @ReceiverUIControl m_Wrapper;
        public UIControlActions(@ReceiverUIControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleUI => m_Wrapper.m_UIControl_ToggleUI;
        public InputActionMap Get() { return m_Wrapper.m_UIControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlActions set) { return set.Get(); }
        public void AddCallbacks(IUIControlActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Add(instance);
            @ToggleUI.started += instance.OnToggleUI;
            @ToggleUI.performed += instance.OnToggleUI;
            @ToggleUI.canceled += instance.OnToggleUI;
        }

        private void UnregisterCallbacks(IUIControlActions instance)
        {
            @ToggleUI.started -= instance.OnToggleUI;
            @ToggleUI.performed -= instance.OnToggleUI;
            @ToggleUI.canceled -= instance.OnToggleUI;
        }

        public void RemoveCallbacks(IUIControlActions instance)
        {
            if (m_Wrapper.m_UIControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIControlActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIControlActions @UIControl => new UIControlActions(this);
    public interface IUIControlActions
    {
        void OnToggleUI(InputAction.CallbackContext context);
    }
}
