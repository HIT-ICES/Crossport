//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Classroom/FPCtl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FPCtl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FPCtl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FPCtl"",
    ""maps"": [
        {
            ""name"": ""SimpleControl"",
            ""id"": ""ab0c260c-5c2a-4002-87d6-3e54da19d915"",
            ""actions"": [
                {
                    ""name"": ""ViewScroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4f1af522-8b9f-4311-9f2d-800aa8a7e8d3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dc33bae3-4986-4bcf-a85d-c8e89a32b38a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""62992474-13d4-4bc5-8457-681257c38b5e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ff37bf6d-541a-42af-96ba-755291d33551"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bedc9f3e-4eca-4397-932d-bb7a8200c778"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""299854c9-3fc1-4f48-a6ae-e99b7f23cf30"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5d193796-ea36-4aa7-8a0a-4a3879eb1ea1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""f03643d1-df14-4a73-8e61-758ef12c1917"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ViewScroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c3031fd7-8aa5-4b04-9ac7-fd8e32b67b74"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ViewScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""91a20e32-7ca6-4551-9c91-694565c5041e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ViewScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e26263cb-2655-4ca7-a6b1-ed8e41671bb2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ViewScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f0056fca-ce6f-47d5-a42e-90a41eadaa31"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ViewScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SimpleControl
        m_SimpleControl = asset.FindActionMap("SimpleControl", throwIfNotFound: true);
        m_SimpleControl_ViewScroll = m_SimpleControl.FindAction("ViewScroll", throwIfNotFound: true);
        m_SimpleControl_Move = m_SimpleControl.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SimpleControl
    private readonly InputActionMap m_SimpleControl;
    private List<ISimpleControlActions> m_SimpleControlActionsCallbackInterfaces = new List<ISimpleControlActions>();
    private readonly InputAction m_SimpleControl_ViewScroll;
    private readonly InputAction m_SimpleControl_Move;
    public struct SimpleControlActions
    {
        private @FPCtl m_Wrapper;
        public SimpleControlActions(@FPCtl wrapper) { m_Wrapper = wrapper; }
        public InputAction @ViewScroll => m_Wrapper.m_SimpleControl_ViewScroll;
        public InputAction @Move => m_Wrapper.m_SimpleControl_Move;
        public InputActionMap Get() { return m_Wrapper.m_SimpleControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SimpleControlActions set) { return set.Get(); }
        public void AddCallbacks(ISimpleControlActions instance)
        {
            if (instance == null || m_Wrapper.m_SimpleControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SimpleControlActionsCallbackInterfaces.Add(instance);
            @ViewScroll.started += instance.OnViewScroll;
            @ViewScroll.performed += instance.OnViewScroll;
            @ViewScroll.canceled += instance.OnViewScroll;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ISimpleControlActions instance)
        {
            @ViewScroll.started -= instance.OnViewScroll;
            @ViewScroll.performed -= instance.OnViewScroll;
            @ViewScroll.canceled -= instance.OnViewScroll;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ISimpleControlActions instance)
        {
            if (m_Wrapper.m_SimpleControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISimpleControlActions instance)
        {
            foreach (var item in m_Wrapper.m_SimpleControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SimpleControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SimpleControlActions @SimpleControl => new SimpleControlActions(this);
    public interface ISimpleControlActions
    {
        void OnViewScroll(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
